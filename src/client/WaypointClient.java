package assign2.client;

import assign2.server.*;
import assign2.client.*;
import javax.swing.*;
import java.io.*;
import javax.swing.event.*;
import javax.swing.text.html.*;
import java.awt.event.*;
import java.awt.*;
import java.util.*;
import java.rmi.*;

/**
 * Copyright (c) 2014 Tim Lindquist,
 * Software Engineering,
 * Arizona State University at the Polytechnic campus
 * <p/>
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation version 2
 * of the License.
 * <p/>
 * This program is distributed in the hope that it will be useful,
 * but without any warranty or fitness for a particular purpose.
 * <p/>
 * Please review the GNU General Public License at:
 * http://www.gnu.org/licenses/gpl-2.0.html
 * see also: https://www.gnu.org/licenses/gpl-faq.html
 * so you are aware of the terms and your rights with regard to this software.
 * Or, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,USA
 * <p/>
 * Purpose: Java client UI for Waypoint management.
 * This class creates Gui components for a UI to manage waypoints.
 * This software is meant to run on OSX, and Windows Cygwin using g++.
 * WaypointClient demonstrates use of the WaypointGUI class
 * for solving cst420 assignments.
 * WaypointGUI class uses Swing components JTextField, JComboBox, and
 * JTextArea to realize a GUI for Waypoint management. 
 * <p/>
 * Ser321 Principles of Distributed Software Systems.
 * see http://pooh.poly.asu.edu/Cst420
 * @author Tim Lindquist (Tim.Lindquist@asu.edu) CIDSE - Software Engineering
 *                       Ira Fulton Schools of Engineering, ASU Polytechnic
 * @file    WaypointGUI.java
 * @date    September, 2014
 * @license See above
 */
public class WaypointClient extends WaypointGUI implements ActionListener, ItemListener {

   private static final boolean debugOn = true;
   private Waypoint aWp;
   private WaypointServer server;
   private String hostId;
   private String port;
                                                   
                                                   

                                                   
   public WaypointClient(String base, String hostId, String port) {
      super(base);
       this.hostId = hostId;
       this.port = port;
      removeWPButt.addActionListener(this);
      addWPButt.addActionListener(this);
      modWPButt.addActionListener(this);
      getAddrButt.addActionListener(this);
      getLatLonButt.addActionListener(this);
      distBearButt.addActionListener(this);
      frWps.addItemListener(this);
      toWps.addItemListener(this);
       
       //Note client uses the remote interface (EmpServer) not the
       //implementation class (EmpServerImpl).
      try{
       server=(WaypointServer)Naming.lookup("rmi://"+hostId+":"+port+"/WaypointServer");
       System.out.println("Client obtained remote object reference to" +
                             " the WaypointServer at:\n"+
                             "rmi://"+hostId+":"+port+"/WaypointServer");
      }
      catch (Exception e){
    	  System.out.println("Could not find server.");
      }
      this.addWindowListener(new WindowAdapter() {
         @Override
         public void windowClosing(WindowEvent e) {
            debug("you clicked X");
            System.exit(0);
         }
      });

      setVisible(true);
   }

   public void itemStateChanged(ItemEvent event){
      if(event.getStateChange() == ItemEvent.SELECTED){
         Object comp = event.getSource();
         debug("Selection event generated by "+
                            ((comp==frWps)?"from ":"to ")+"combobox. "+
                            "Selected waypoint is: "+(String)event.getItem());
         try {
			String wpStr[] = server.getNames(); //Needs fixing
		} catch (RemoteException e) {
			System.out.println("Error retrieving name from server.");
		}
      }
   }

   public void actionPerformed(ActionEvent e) {
      if(e.getActionCommand().equals("Remove")) {
         debug("you clicked Remove Waypoint");
         frWps.removeItem(frWps.getSelectedItem());
         toWps.removeItem(toWps.getSelectedItem());
      }else if(e.getActionCommand().equals("Add")) {
         debug("you clicked Add Waypoint");
         frWps.addItem(nameIn.getText()); //insert control logic code
          try {
              server.add(nameIn.getText(), aWp);
          } catch (RemoteException e1) {
              e1.printStackTrace();
          }
          toWps.addItem(nameIn.getText()); //same
          try {
              server.add(nameIn.getText(), aWp);
          } catch (RemoteException e1) {
              e1.printStackTrace();
          }
         distBearIn.setText("Added: "+nameIn.getText());
      }else if(e.getActionCommand().equals("Modify")) {
         debug("you clicked Modify Waypoint");
      }else if(e.getActionCommand().equals("GetLatLon")) {
         debug("you clicked Get Lat/Lon for Addr");
      }else if(e.getActionCommand().equals("GetAddr")) {
         debug("you clicked Get Address for Lat/Lon");
      }else if(e.getActionCommand().equals("Distance")) {
         debug("you clicked Distance and Bearing");
      }
   }

   private void debug(String message) {
      if (debugOn)
         System.out.println("debug: "+message);
   }


   public static void main(String args[]) {
      try{
         String name = "Cst420";
          String hostId = "localhost";
          String port = "2222";
         if (args.length >= 3) {
            name = args[0];
             hostId = args[1];
             port = args[2];
         }
         WaypointClient sa2 = new WaypointClient(name,hostId,port);
      }catch (Exception ex){
         ex.printStackTrace();
      }
   }
}
